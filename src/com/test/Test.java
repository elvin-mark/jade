package com.test;

import com.data.Tensor;
import com.functions.F;
import com.nn.*;
import com.utils.*;
import com.optim.*;

import java.util.HashMap;
import java.util.Random;

public class Test {
        public static void testDraft() {
                // Some random tests
                Tensor t1 = new Tensor(new int[] { 2, 3, 4, 4 }, new float[] {
                                0.49625658988952637f,
                                0.7682217955589294f, 0.08847743272781372f, 0.13203048706054688f,
                                0.30742281675338745f,
                                0.6340786814689636f, 0.4900934100151062f, 0.8964447379112244f,
                                0.455627977848053f,
                                0.6323062777519226f, 0.3488934636116028f, 0.40171730518341064f,
                                0.022325754165649414f,
                                0.16885894536972046f, 0.2938884496688843f, 0.518521785736084f,
                                0.6976675987243652f,
                                0.800011396408081f, 0.16102945804595947f, 0.28226858377456665f,
                                0.6816085577011108f,
                                0.9151939749717712f, 0.39709991216659546f, 0.8741558790206909f,
                                0.41940832138061523f,
                                0.5529070496559143f, 0.9527381062507629f, 0.036164820194244385f,
                                0.1852310299873352f,
                                0.37341737747192383f, 0.3051000237464905f, 0.9320003986358643f,
                                0.17591017484664917f,
                                0.2698335647583008f, 0.15067976713180542f, 0.03171950578689575f,
                                0.20812976360321045f,
                                0.9297990202903748f, 0.7231091856956482f, 0.7423362731933594f,
                                0.5262957811355591f,
                                0.24365824460983276f, 0.584592342376709f, 0.033152639865875244f,
                                0.13871687650680542f,
                                0.242235004901886f, 0.815468966960907f, 0.793160617351532f,
                                0.2782524824142456f,
                                0.48195880651474f, 0.8197803497314453f, 0.9970665574073792f,
                                0.6984410881996155f,
                                0.5675464272499084f, 0.8352431654930115f, 0.2055988311767578f,
                                0.593172013759613f,
                                0.11234724521636963f, 0.1534569263458252f, 0.24170821905136108f,
                                0.7262365221977234f,
                                0.7010802030563354f, 0.2038237452507019f, 0.6510535478591919f,
                                0.7744860053062439f,
                                0.4368913173675537f, 0.5190907716751099f, 0.6158523559570312f,
                                0.8101882934570312f,
                                0.9800970554351807f, 0.1146882176399231f, 0.3167651295661926f,
                                0.6965049505233765f,
                                0.9142746925354004f, 0.9351036548614502f, 0.9411783814430237f,
                                0.5995072722434998f,
                                0.06520867347717285f, 0.5459962487220764f, 0.18719732761383057f,
                                0.03402292728424072f,
                                0.944246232509613f, 0.8801798820495605f, 0.0012360215187072754f,
                                0.5935860276222229f,
                                0.4157699942588806f, 0.41771942377090454f, 0.2711215615272522f,
                                0.6922780871391296f,
                                0.2038482427597046f, 0.6832956671714783f, 0.75285404920578f,
                                0.8579357862472534f,
                                0.6869555711746216f, 0.0051323771476745605f, 0.17565155029296875f
                });

                t1.requires_grad(true);

                // BatchNorm2d bn = new BatchNorm2d(3);
                // Tensor l = bn.forward(t1).mean();
                // System.out.println(l);
                // l.backward();
                // System.out.println(t1.grad);
                // for (Tensor param : bn.parameters()) {
                // System.out.println(param.grad);
                // }

                // Tensor a = new Tensor(new int[] { 1, 3, 1, 1 }, new float[] { 1.0f, 2.0f,
                // 3.0f });
                // Tensor b = new Tensor(new int[] { 1, 3, 1, 1 }, new float[] { 4.0f, 5.0f,
                // 6.0f });
                // a.requires_grad(true);
                // b.requires_grad(true);
                // Tensor l = t1.mul(a).add(b);
                // System.out.println(l);
                // Tensor l2 = l.norm();
                // System.out.println(l2);
                // l2.backward();
                // System.out.println(t1.grad);
                // System.out.println(a.grad);
                // System.out.println(b.grad);
        }

        public static void main(String args[]) {
                testDraft();
        }
}
